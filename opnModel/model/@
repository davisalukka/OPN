from django.shortcuts import render
from django.views.generic import TemplateView
from .forms import SignupForm
from .models import *

# Create your views here.

class HomePageView(TemplateView):
    template_name = "index.html"


#Add this view
class AboutPageView(TemplateView):
    template_name = "about.html"

#Add this view
class FormPageView(TemplateView):
    template_name = "form.html"

#Add this view
def signupform(request):
    #if form is submitted
    if request.method == 'POST':
        #will handle the request later
        form = SignupForm(request.POST)
        
        if form.is_valid():
            companyName = form.cleaned_data['companyName']
            annualRevenue = form.cleaned_data['annualRevenue']
            yoyGrowth = form.cleaned_data['yoyGrowth'] / 100
            capitalSeeking = form.cleaned_data['capitalSeeking']
            monthlyBurn = form.cleaned_data['monthlyBurn']
            investmentPeriod = form.cleaned_data['investmentPeriod']
            industryMultiplier = form.cleaned_data['industryMultiplier']
            outstandingShares = form.cleaned_data['outstandingShares']

            netincomeatexit =  netIncomeAtExit(float(annualRevenue), float(yoyGrowth), float(investmentPeriod))
            
            companyvalueatexit = companyValueAtExit(float(netincomeatexit), float(industryMultiplier))

            futurevalue = futureValue(capitalSeeking, yoyGrowth, investmentPeriod)

            requiredownership = requiredOwnership(futurevalue, companyvalueatexit)

            outstandingsharespost = outstandingSharesPost(outstandingShares, futurevalue, companyvalueatexit)

            postmoneyvaluation = postMoneyValuation(companyvalueatexit, yoyGrowth, investmentPeriod)

            premoneyvaluation = preMoneyValuation(postmoneyvaluation, capitalSeeking)

            shareprice = sharePrice(postmoneyvaluation, capitalSeeking)

            requiredrateforprofitability = requiredRateForProfitability(monthlyBurn, annualRevenue)

            requiredtermforprofitabilty = requiredTermForProfitabilty(monthlyBurn, annualRevenue, yoyGrowth)

            revenuegrowth = revenueGrowth(annualRevenue, investmentPeriod)

            projectedsurplus = projectedSurplus(annualRevenue, monthlyBurn, investmentPeriod)

            confidencelevel = confidenceLevel(investmentPeriod, yoyGrowth, capitalSeeking, annualRevenue)

            return render(request, 'result.html',{
                'companyName': companyName,
                'annualRevenue': annualRevenue,
                'yoyGrowth': yoyGrowth,
                'capitalSeeking': capitalSeeking,
                'monthlyBurn': monthlyBurn,
                'investmentPeriod': investmentPeriod,
                'industryMultiplier': industryMultiplier,
                'outstandingShares': outstandingShares,


                #including evlauated metrics from models.py
                'netIncomeAtExit': netincomeatexit,
                'companyValueAtExit': companyvalueatexit,
                'futureValue': futurevalue,
                'requiredOwnership': requiredownership,
                'outstandingSharesPost': outstandingsharespost,
                'postMoneyValuation': postMoneyvaluation,
                'preMoneyValuation': preMoneyvaluation,
                'sharePrice': shareprice,
                'requiredRateForProfitability': requiredrateforprofitability,
                'requiredTermForProfitabilty': requiredtermforprofitabilty,
                'revenueGrowth': revenuegrowth,
                'projectedSurplus': projectedsurplus,
                'confidenceLevel': confidencelevel,
                })

    else:
        #creating a new form
        form = SignupForm()
        
    #returning form
    return render(request, 'form.html', {'form':form});


